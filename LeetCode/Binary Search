"""Binary Search"""
class Solution:
    def search(self, nums: List[int], target: int) -> int:
        left = 0
        right = len(nums)-1
        while right >= left:
            mid = (left+right)//2
            if nums[mid] == target:
                return mid
            if nums[mid] < target:
                left = mid + 1
            else:
                right = mid - 1
        return -1

"""Guess Number Higher or Lower"""
# The guess API is already defined for you.
# @param num, your guess
# @return -1 if my number is lower, 1 if my number is higher, otherwise return 0
# def guess(num: int) -> int:
class Solution:
    def guessNumber(self, n: int) -> int:
        minimum = 0
        maximum = n
        while minimum <= maximum:
            mid = (minimum + maximum)//2
            res = guess(mid)
            if res == 0:
                return mid
            if res == 1:
                minimum = mid + 1
            else:
                maximum = mid - 1

"""Search in Rotated Sorted Array"""
class Solution:
    def search(self, nums: List[int], target: int) -> int:
        if target in nums:
            return nums.index(target)
        else:
            return -1
#         n = len(nums)
#         left, right = 0, n - 1
#         if n == 0: 
#             return -1
        
#         while left <= right:
#             mid = left + (right - left) // 2
#             if nums[mid] == target: 
#                 return mid
            
#             if nums[mid] >= nums[left]:
#                 if nums[left] <= target < nums[mid]:
#                     right = mid - 1
#                 else:
#                     left = mid + 1
                    
#             else:
#                 if nums[mid] < target <= nums[right]:
#                     left = mid + 1
#                 else:
#                     right = mid - 1
#         return -1

"""First Bad Version"""
# The isBadVersion API is already defined for you.
# @param version, an integer
# @return an integer
# def isBadVersion(version):

class Solution:
    def firstBadVersion(self, n):
        if n == 0 or n == 1:
            return n
        first = 1
        second = n
        while first < second:
            mid = (first + second) // 2
            if isBadVersion(mid):
                second = mid
            else:
                first = mid + 1
        return first

"""Find Peak Element"""
class Solution:
    def findPeakElement(self, nums: List[int]) -> int:
        first = 0
        second = len(nums)-1
        while first < second:
            mid = (first + second+1)//2
            if nums[mid] > nums[mid-1]:
                first = mid
            else:
                second = mid - 1
        return first

"""Find Minimum in Rotated Sorted Array"""
class Solution:
    def findMin(self, nums: List[int]) -> int:
        left = 0
        right = len(nums)-1
        while left < right:
            mid = (left+right)//2
            if nums[mid] > nums[right]:
                left = mid + 1
            else:
                right = mid
                
        return nums[left]

"""Search for a Range"""
class Solution:
    def searchRange(self, nums: List[int], target: int) -> List[int]:
        res = [-1,-1]
        if not nums or len(nums) == 0:
            return res
        left = 0
        right = len(nums)-1
        while left <= right:
            mid = (left + right) // 2
            if target <= nums[mid]:
                if target == nums[mid]:
                    res[0] = mid
                right = mid - 1
            else:
                left = mid + 1
        right = len(nums)-1
        while left <= right:
            mid = (left + right)//2
            if target >= nums[mid]:
                if target == nums[mid]:
                    res[1] = mid
                left = mid + 1
            else:
                right = mid - 1
        return res

"""Find K Closest Elements"""
class Solution:
    def findClosestElements(self, arr: List[int], k: int, x: int) -> List[int]:
        left = 0
        right = len(arr)-k
        while left < right:
            mid = (left + right)//2
            midValue = arr[mid]
            if x - arr[mid+k] <= midValue - x:
                right = mid
            else:
                left = mid + 1
        
        return arr[left : left + k]

"""Find Peak Element"""
class Solution:
    def findPeakElement(self, nums: List[int]) -> int:
        first = 0
        second = len(nums)-1
        while first < second:
            mid = (first + second+1)//2
            if nums[mid] > nums[mid-1]:
                first = mid
            else:
                second = mid - 1
        return first

"""Valid Perfect Square"""
class Solution:
    def isPerfectSquare(self, num: int) -> bool:
        if int(num**0.5)**2 == int(num):
            return True
        else:
            return False

"""Find Smallest Letter Greater Than Target"""
class Solution:
    def nextGreatestLetter(self, letters: List[str], target: str) -> str:
        start = 0
        end = len(letters)-1
        res = 0
        while start <= end:
            mid = (start+end)//2
            if letters[mid] > target:
                res = mid
                end = mid - 1
            else:
                start = mid + 1
        return(letters[res])

"""Find Minimum in Rotated Sorted Array"""
class Solution:
    def findMin(self, nums: List[int]) -> int:
        left = 0
        right = len(nums)-1
        while left < right:
            mid = (left+right)//2
            if nums[mid] > nums[right]:
                left = mid + 1
            else:
                right = mid
        return nums[left]

"""Find Minimum in Rotated Sorted Array II"""
class Solution:
    def findMin(self, nums: List[int]) -> int:
        l, r = 0, len(nums)-1
        while l < r:
            mid = (l+r)//2
            if nums[mid] == nums[r]:
                if nums[mid] == nums[l]:
                    l = l+1 # or r = r-1
                else:
                    r = mid
            elif nums[mid] > nums[r]:
                l = mid+1
            else:
                r = mid
        return nums[l]

"""Intersection of Two Arrays"""
class Solution:
    def intersection(self, nums1: List[int], nums2: List[int]) -> List[int]:
        return set(nums1) & set(nums2)
        
"""Intersection of Two Arrays II"""
class Solution:
    def intersect(self, nums1: List[int], nums2: List[int]) -> List[int]:
#         res1 = {}
#         res2 = {}
#         result = []
#         for i in range(len(nums1)):
#             res1[i] = nums1[i]
#         for i in range(len(nums2)):
#             res2[i] = nums2[i]
#         for i in range(len(nums1)):
#             if nums1[i] in res2.values() and nums1[i] not in result:
#                     result.append(nums1[i])
#                     res1.pop(i)

#         return result


        nums1.sort()
        nums2.sort()
        res = []
        i = 0
        j = 0
        while i < len(nums1) and j < len(nums2):
            if nums1[i] == nums2[j]:
                res.append(nums1[i])
                i += 1
                j += 1
            elif nums1[i] < nums2[j]:
                i += 1
            else:
                j += 1
        return res

"""Two Sum II - Input array is sorted"""
class Solution:
    def twoSum(self, numbers: List[int], target: int) -> List[int]:
        start = 0
        end = len(numbers)-1
        while start < end:
            if numbers[start] + numbers[end] == target:
                break
            elif numbers[start] + numbers[end] < target:
                start += 1 
            else:
                end -= 1
        return [start+1,end+1]
        
"""Find the Duplicate Number"""
class Solution:
    def findDuplicate(self, nums: List[int]) -> int:
        start = 0
        end = len(nums) - 1
        while end - start > 1:
            mid = (end + start) // 2
            count = 0
            for k in nums:
                if mid < k <= end:
                    count += 1
            if count > end - mid:
                start = mid
            else:
                end = mid
        return end
        # nums.sort()
        # for i in range(len(nums)):
        #     if nums[i] == nums[i-1]:
        #         return nums[i]

"""Median of Two Sorted Arrays"""
class Solution:
    def findMedianSortedArrays(self, nums1: List[int], nums2: List[int]) -> float:
        res = sorted(nums1+nums2)
        length = len(res)
        if length % 2 == 1:
            return res[length // 2]
        else:
            i = length // 2
            return (res[i - 1] + res[i]) / 2

"""Find K-th Smallest Pair Distance"""
class Solution:
    def smallestDistancePair(self, nums: List[int], k: int) -> int:
        def enough(distance):
            count, i, j = 0, 0, 0
            while i < n or j < n:
                while j < n and nums[j] - nums[i] <= distance:
                    j += 1
                count += j - i - 1
                i += 1
            return count >= k

        nums.sort()
        n = len(nums)
        left, right = 0, nums[-1] - nums[0]
        while left < right:
            mid = left + (right - left) // 2
            if not enough(mid):
                left = mid + 1
            else:
                right = mid
        return left

    
#         nums.sort()
#         left = 0
#         right = nums[-1] - nums[0]
#         while left < right:
#             count = 0
#             start = 0
#             mid = (left + right)//2
#             for i in range(len(nums)):
#                 while nums[i] - nums[start] > mid:
#                     start += 1
#                 count += i - start
                
#             if count < k:
#                 left = mid + 1
#             else:
#                 right = mid
#         return left

"""Split Array Largest Sum"""
class Solution:
    def splitArray(self, nums: List[int], m: int) -> int:
        def enough_subarrays(max_sum):
            subarrays = 1
            subarray_sum = 0
            for num in nums:
                subarray_sum += num
                if subarray_sum > max_sum:
                    subarray_sum = num
                    subarrays += 1
                    if subarrays > m:
                        return False
            return True

        left = max(nums)
        right = sum(nums)
        while left < right:
            mid = left + (right - left) // 2
            if enough_subarrays( mid ):
                right = mid
            else:
                left = mid + 1
        return left
