"""Binary Tree Preorder Traversal"""
# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    def preorderTraversal(self, root: TreeNode) -> List[int]:
        if not root:
            return []
        # res = [root.val]
        # res += self.preorderTraversal(root.left)
        # res += self.preorderTraversal(root.right)
        return [root.val] + self.preorderTraversal(root.left) + self.preorderTraversal(root.right)              
        
        
        
#         res = []
#         def pre(node):
#             res.append(node.val)
            
#             if node.left:
#                 pre(node.left)
#             if node.right:
#                 pre(node.right)
#         if root:
#             pre(root)
#         return res

"""Binary Tree Inorder Traversal"""
# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    def inorderTraversal(self, root: TreeNode) -> List[int]:
        res = []
        def rec(root):
            if root is None:
                return []
            else:
                rec(root.left)
                res.append(root.val)
                rec(root.right)
        rec(root)
        return res

"""Binary Tree Postorder Traversal"""
# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    def postorderTraversal(self, root: TreeNode) -> List[int]:
        if not root:
            return []
        res = []
        res.extend(self.postorderTraversal(root.left))
        res.extend(self.postorderTraversal(root.right))
        res.append(root.val)
        return res

"""Binary Tree Level Order Traversal"""
# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    def levelOrder(self, root: TreeNode) -> List[List[int]]:
   Binary Tree Level Order Traversal     if root is None:
            return []
        res = []
        def rec(lvl,root):
            if root:
                if lvl == len(res):
                    res.append([])
                res[lvl].append(root.val)
                if root.left:
                    rec(lvl+1,root.left)
                if root.right:
                    rec(lvl+1,root.right)
        rec(0,root)
        return res
"""Maximum Depth of Binary Tree"""
# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    def maxDepth(self, root: TreeNode) -> int:
        if not root:
            return 0
        if not root.right and not root.left:
            return 1
        return 1 + max(self.maxDepth(root.left), self.maxDepth(root.right))

"""Symmetric Tree"""
# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    def isSymmetric(self, root: TreeNode) -> bool:
        if not root:
            return True
        stack = [(root.left, root.right)]
        while stack:
            nodes = stack.pop()
            lefts,rights = nodes
            if lefts is None and rights is None:
                continue
            if lefts is None or rights is None:
                return False
            elif lefts.val != rights.val:
                return False
            stack.append((lefts.right,rights.left))
            stack.append((lefts.left,rights.right))
        return True

"""Path Sum"""
# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    def hasPathSum(self, root: TreeNode, sum: int) -> bool:
        if not root:
            return False
        stack = [root]
        while stack:
            cur = stack.pop()                
            if cur.left:
                cur.left.val += cur.val
                stack.append(cur.left)
            if cur.right:
                cur.right.val += cur.val
                stack.append(cur.right)
            if not cur.left and not cur.right and cur.val == sum:
                return True

"""Construct Binary Tree from Inorder and Postorder Traversal"""
# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    def buildTree(self, inorder: List[int], postorder: List[int]) -> TreeNode:
        if not inorder or not postorder:
            return None
        
        root = TreeNode(postorder.pop())
        mid = inorder.index(root.val)

        root.right = self.buildTree(inorder[mid+1:], postorder)
        root.left = self.buildTree(inorder[:mid], postorder)

        return root

"""Construct Binary Tree from Preorder and Inorder Traversal"""
# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    def buildTree(self, preorder: List[int], inorder: List[int]) -> TreeNode:
        if not preorder or not inorder:
            return None
        
        root = TreeNode(preorder.pop(0))
        mid = inorder.index(root.val)
        
        root.left = self.buildTree(preorder,inorder[:mid])
        root.right = self.buildTree(preorder,inorder[mid+1:])
        return root
        
"""Populating Next Right Pointers in Each Node"""
"""
# Definition for a Node.
class Node:
    def __init__(self, val: int = 0, left: 'Node' = None, right: 'Node' = None, next: 'Node' = None):
        self.val = val
        self.left = left
        self.right = right
        self.next = next
"""

class Solution:
    def connect(self, root: 'Node') -> 'Node':
        if root is None:
            return root
        first = root
        while first and first.left:
            cur = first
            while cur:
                cur.left.next = cur.right
                if cur.next and cur.right:
                    cur.right.next = cur.next.left
                cur = cur.next
            first = first.left
        return root

"""Populating Next Right Pointers in Each Node II"""
"""
# Definition for a Node.
class Node:
    def __init__(self, val: int = 0, left: 'Node' = None, right: 'Node' = None, next: 'Node' = None):
        self.val = val
        self.left = left
        self.right = right
        self.next = next
"""

class Solution:
    def connect(self, root: 'Node') -> 'Node':
        if not root:
            return 
        
        cur = root
        while cur:
            dummy = Node(0)
            prev = dummy
            while cur:
                if cur.left:
                    prev.next = cur.left
                    prev = prev.next
                if cur.right:
                    prev.next = cur.right
                    prev = prev.next
                cur = cur.next
            cur = dummy.next
        return root

"""Lowest Common Ancestor of a Binary Tree"""
# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

class Solution:
    def lowestCommonAncestor(self, root: 'TreeNode', p: 'TreeNode', q: 'TreeNode') -> 'TreeNode':
        def dfs(root,p,q):
            if not root:
                return None
            if root == p or root == q:
                return root
            root_left = dfs(root.left,p,q)
            root_right = dfs(root.right,p,q)
            if root_left is not None and root_right is not None:
                return root
            if root_left:
                return root_left
            else:
                return root_right
        return dfs(root,p,q)
        
"""Serialize and Deserialize Binary Tree"""
# Definition for a binary tree node.
# class TreeNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

class Codec:

    def serialize(self, root):
        return root
    
    def deserialize(self, data):
        return data
        

# Your Codec object will be instantiated and called as such:
# ser = Codec()
# deser = Codec()
# ans = deser.deserialize(ser.serialize(root))
