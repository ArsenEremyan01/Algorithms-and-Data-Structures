"""Max Consecutive Ones"""
class Solution:
    def findMaxConsecutiveOnes(self, nums: List[int]) -> int:
        x = 0
        y = 0
        for i in range(len(nums)):
            if nums[i] == 1:
                y += 1
            if nums[i] == 0:
                x = max(x,y)
                y = 0
            if y > x:
                x = y
        return x

"""Find Numbers with Even Number of Digits"""
class Solution:
    def findNumbers(self, nums: List[int]) -> int:
        res = 0
        for i in range(len(nums)):
            if len(str(nums[i])) % 2 == 0:
                res += 1
        return res

"""Squares of a Sorted Array"""
class Solution:
    def sortedSquares(self, nums: List[int]) -> List[int]:
        res = [i**2 for i in nums]
        return sorted(res)

"""Duplicate Zeros"""
class Solution:
    def duplicateZeros(self, arr: List[int]) -> None:
        temp = 0
        while temp < len(arr):
            if arr[temp] == 0:
                arr.insert(temp + 1, 0)
                arr.pop(len(arr) - 1)
                temp += 1
            temp += 1

#         res = []
#         for i in arr:
#             res.append(i)
#             if i == 0:
#                 res.append(0)
#             elif len(res) == len(arr):
#                 break
                
"""Merge Sorted Array"""
class Solution:
    def merge(self, nums1: List[int], m: int, nums2: List[int], n: int) -> None:
        if n > 0:
            nums1[-n:] = nums2
            nums1.sort()

"""Remove Element"""
class Solution:
    def removeElement(self, nums: List[int], val: int) -> int:
        res = 0
        for i in range(0, len(nums)): 
            if nums[i] != val: 
                nums[res] = nums[i] 
                res += 1
        return res 
        
"""Remove Duplicates from Sorted Array"""
class Solution:
    def removeDuplicates(self, nums: List[int]) -> int:
        nums[:] = sorted(list(set(nums)))
        return len(nums)
        
        # if len(nums) == 0:
        #     return 0
        # if len(nums) == 1:
        #     return 1
        # j = 0
        # for i in range(len(nums)):
        #     if nums[i] == nums[j]:
        #         pass
        #     else:
        #         j += 1
        #         nums[j] = nums[i]
        # return j+1

"""Check If N and Its Double Exist"""
class Solution:
    def checkIfExist(self, arr: List[int]) -> bool:
        if arr.count(0) > 1:
            return True
        else:
            return [i for i in arr if i != 0 and i*2 in arr] 

"""Valid Mountain Array"""
class Solution:
    def validMountainArray(self, A: List[int]) -> bool:
        if len(A) < 3:
            return False
        maxi = A.index(max(A))
        if maxi == len(A)-1 or maxi == 0:
            return False
        for i in range(0,maxi):
            if A[i] > A[i+1]:
                return False
        for i in range(maxi,len(A)-1):
            if A[i] <= A[i+1]:
                return False
        return True
        
"""Replace Elements with Greatest Element on Right Side"""
class Solution:
    def replaceElements(self, arr: List[int]) -> List[int]:
        for i in range(len(arr) - 1):
            arr[i] = max(arr[i + 1:])
        arr[-1] = -1
        return arr
        
"""Remove Duplicates from Sorted Array"""
class Solution:
    def removeDuplicates(self, nums: List[int]) -> int:
        nums[:] = sorted(list(set(nums)))
        return len(nums)
        
        # if len(nums) == 0:
        #     return 0
        # if len(nums) == 1:
        #     return 1
        # j = 0
        # for i in range(len(nums)):
        #     if nums[i] == nums[j]:
        #         pass
        #     else:
        #         j += 1
        #         nums[j] = nums[i]
        # return j+1

"""Move zeroes"""
class Solution:
    def moveZeroes(self, nums: List[int]) -> None:
        cur = 0
        for i in range(len(nums)):
            if nums[i] != 0:
                nums[i],nums[cur] = nums[cur], nums[i] 
                cur += 1
        
        # for i in nums:
        #     if i == 0:
        #         nums.remove(i)
        #         nums.append(i)
        
"""Sort Array By Parity"""
class Solution:
    def sortArrayByParity(self, A: List[int]) -> List[int]:
        if len(A) == 0:
            return 0
        s = []
        d = []
        for i in range(len(A)):
            if A[i] % 2 == 0:
                s.append(A[i])
            else:
                d.append(A[i])
        return s + d
"""Remove Element"""
class Solution:
    def removeElement(self, nums: List[int], val: int) -> int:
        res = 0
        for i in range(0, len(nums)): 
            if nums[i] != val: 
                nums[res] = nums[i] 
                res += 1
        return res 
        
"""Height Checker"""
class Solution:
    def heightChecker(self, heights: List[int]) -> int:
        result, new_h = 0, sorted(heights)
        for i in range(len(heights)):
            if new_h[i] != heights[i]:
                result += 1
        return result
        
"""Third Maximum Number"""
class Solution:
    def thirdMax(self, nums: List[int]) -> int:
        nums = list(set(nums))
        nums.sort()
        if len(nums) <= 2:
            return nums[-1]
        return nums[-3]
        
"""Find All Numbers Disappeared in an Array"""
class Solution:
    def findDisappearedNumbers(self, nums: List[int]) -> List[int]:
        nums_input = set(nums)
        nums_output = set([i for i in range(1,len(nums)+1)])
        return list(nums_output - nums_input)

"""Squares of a Sorted Array"""
class Solution:
    def sortedSquares(self, nums: List[int]) -> List[int]:
        res = [i**2 for i in nums]
        return sorted(res)
